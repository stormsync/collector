services:
  vault:
    hostname: vault
    container_name: vault
    image: vault:1.12.0
    environment:
      VAULT_ADDR: "http://vault:8200"
      VAULT_API_ADDR: "http://vault:8200"
      VAULT_LOCAL_CONFIG: '{"backend": {"file": {"path": "/vault/file"}},"listener": {"tcp": {"address": "vault:8200", "tls_disable": 1}}, "ui": true}'
      TZ: "America/Chicago"
    ports:
      - "8200:8200"
    volumes:
      - /Users/jc/compose-volumes/vault/file:/vault/file:rw
      - /Users/jc/compose-volumes/vault/config.hcl:/vault/config/config.hcl:rw

    cap_add:
      - IPC_LOCK
    entrypoint: vault server -dev -dev-listen-address="vault:8200" -dev-root-token-id="root"
    networks:
      - app-tier

  redis:
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - /Users/jc/compose-volumes/redis/data:/data:rw
    networks:
    - app-tier


  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
    - app-tier

  kafka-1:
    image: confluentinc/cp-kafka:7.6.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka-1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_LOG4J_ROOT_LOGLEVEL: ERROR
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: "false"
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zookeeper
    networks:
    - app-tier

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    command:
      - "--query.base-path=/jaeger/ui"
      - "--prometheus.server-url=prometheus:9090"
      - "--prometheus.query.support-spanmetrics-connector=true"
      - "--prometheus.query.normalize-calls=true"
      - "--prometheus.query.normalize-duration=true"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=prometheus:9090
    ports:
      - '14269:14269'
      - '4317:4317' # OTLP collector grpc
      - '4318:4318' # OTLP collector http
      - '16686:16686'
      - '16685:16685'
    expose:
      - '4317'
      - '14269'
    networks:
    - app-tier



  prometheus:
    container_name: prometheus
    image: prom/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus' #Where Prometheus writes its database. Defaults to data/.
      - '--storage.tsdb.retention.time=1d' #When to remove old data. Defaults to 15d. Overrides storage.tsdb.retention if this flag is set to anything other than default.
      - '--storage.tsdb.retention.size=1GB'
      - '--enable-feature=otlp-write-receiver'
    volumes:
      - ./deploy/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:rw
      - prometheus-data-volume:/prometheus:rw
    ports:
      - '9090:9090'
    networks:
    - app-tier
    deploy:
      resources:
        limits:
          memory: 300m
          cpus: "0.60"

  otelcol:
    container_name: otelcol
    image: otel/opentelemetry-collector-contrib:latest
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml" ]
    volumes:
      - ./deploy/otelcollector/otelcol-config.yml:/etc/otelcol-config.yml:rw
    expose:
      - '4318'
    ports:
      - '14318:4318'
    depends_on:
      - jaeger
    networks:
    - app-tier
    deploy:
      resources:
        limits:
          memory: 300M
          cpus: "0.60"

  collector:
    container_name: collector
    build:
      context: .
      dockerfile: Dockerfile
    image: collector:latest
    environment:
      VAULT_TOKEN: "root"
      ENVIRONMENT: "upstash-development"
    volumes:
      - ./configs/upstash-development.yml:/configs/upstash-development.yml:rw
    user: "1001"
    expose:
    - "8088"
    depends_on:
      - vault
      - redis
      - kafka-1
      - prometheus
      - otelcol
    networks:
    - app-tier
    deploy:
      resources:
        limits:
          memory: 200m
          cpus: "0.70"
networks:
  app-tier:
    driver: bridge
volumes:
  prometheus-data-volume: